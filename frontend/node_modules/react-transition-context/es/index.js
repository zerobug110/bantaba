"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTransitionContext = useTransitionContext;
exports.overallTransitionState = overallTransitionState;
exports.TransitionContext = TransitionContext;
exports.useTransitionStateEffect = useTransitionStateEffect;
exports.useTransitionStateEffectFilter = useTransitionStateEffectFilter;
exports.useAutofocusRef = useAutofocusRef;
exports.useLeftEffect = exports.useLeavingEffect = exports.useCameInEffect = exports.useEnteredEffect = exports.useAppearedEffect = exports.useEnteringEffect = exports.useAppearingEffect = void 0;

var React = _interopRequireWildcard(require("react"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/**
 * 
 * @prettier
 */
const BaseTransitionContext = React.createContext('in');

function useTransitionContext() {
  return (0, React.useContext)(BaseTransitionContext);
}

const priority = ['out', 'leaving', 'appearing', 'entering'];

function overallTransitionState(parentState, childState) {
  for (let state of priority) {
    if (parentState === state || childState === state) return state;
  }

  return childState;
}

function TransitionContext({
  state,
  children
}) {
  const parentState = useTransitionContext();
  const overallState = overallTransitionState(parentState, state);
  return React.createElement(BaseTransitionContext.Provider, {
    value: overallState
  }, children);
}

function outish(state) {
  return state === 'out' || state === 'leaving';
}

function useTransitionStateEffect(effect) {
  const nextState = useTransitionContext();
  const prevStateRef = (0, React.useRef)(null);
  const effectRef = (0, React.useRef)(effect);
  effectRef.current = effect;
  (0, React.useEffect)(() => {
    const prevState = prevStateRef.current;
    const effect = effectRef.current;
    prevStateRef.current = nextState;
    effect(prevState, nextState);
  }, [nextState]);
  (0, React.useEffect)(() => {
    return () => {
      const effect = effectRef.current;
      if (!outish(nextState)) effect(nextState, 'leaving');
    };
  }, []);
}

function useTransitionStateEffectFilter(filter) {
  return effect => useTransitionStateEffect((prevState, nextState) => {
    if (filter(prevState, nextState)) effect(prevState, nextState);
  });
}

const useAppearingEffect = useTransitionStateEffectFilter((prevState, nextState) => outish(prevState || 'out') && nextState === 'appearing');
exports.useAppearingEffect = useAppearingEffect;
const useEnteringEffect = useTransitionStateEffectFilter((prevState, nextState) => outish(prevState || 'out') && nextState === 'entering');
exports.useEnteringEffect = useEnteringEffect;
const useAppearedEffect = useTransitionStateEffectFilter((prevState, nextState) => prevState === 'appearing' && nextState === 'in');
exports.useAppearedEffect = useAppearedEffect;
const useEnteredEffect = useTransitionStateEffectFilter((prevState, nextState) => prevState === 'entering' && nextState === 'in');
exports.useEnteredEffect = useEnteredEffect;
const useCameInEffect = useTransitionStateEffectFilter((prevState, nextState) => nextState === 'in');
exports.useCameInEffect = useCameInEffect;
const useLeavingEffect = useTransitionStateEffectFilter((prevState, nextState) => !outish(prevState || 'out') && nextState === 'leaving');
exports.useLeavingEffect = useLeavingEffect;
const useLeftEffect = useTransitionStateEffectFilter((prevState, nextState) => prevState === 'leaving' && nextState === 'out');
exports.useLeftEffect = useLeftEffect;

function useAutofocusRef() {
  const ref = (0, React.useRef)();
  useCameInEffect(() => {
    const el = ref.current;

    if (el) {
      el.focus();
      if (typeof el.select === 'function') el.select();
    }
  });
  return ref;
}