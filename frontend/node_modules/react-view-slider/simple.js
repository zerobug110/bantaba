"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSimpleViewSlider = createSimpleViewSlider;
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var React = _interopRequireWildcard(require("react"));

var _inlineStylePrefixer = _interopRequireDefault(require("inline-style-prefixer"));

var _index = _interopRequireDefault(require("./index"));

/* eslint-env browser */
function defaultRenderView(_ref) {
  var index = _ref.index;
  return this.state.views[index];
}

function createSimpleViewSlider(ViewSlider) {
  var _temp;

  var renderView = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultRenderView;
  return _temp =
  /*#__PURE__*/
  function (_React$Component) {
    (0, _inherits2["default"])(SimpleViewSlider, _React$Component);

    function SimpleViewSlider(props) {
      var _this;

      (0, _classCallCheck2["default"])(this, SimpleViewSlider);
      _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(SimpleViewSlider).call(this, props));
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "renderView", renderView.bind((0, _assertThisInitialized2["default"])(_this)));
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleSlideTransitionEnd", function () {
        if (!_this.props.keepViewsMounted) {
          var _this$state = _this.state,
              views = _this$state.views,
              activeView = _this$state.activeView;

          if (activeView < views.length - 1) {
            _this.setState({
              views: views.slice(0, activeView + 1)
            }, function () {
              var onSlideTransitionEnd = _this.props.onSlideTransitionEnd;
              if (onSlideTransitionEnd) onSlideTransitionEnd();
            });
          }
        }
      });
      var child = React.Children.only(props.children);

      var _activeView = parseInt(child.key);

      var _views = [];
      _views[_activeView] = child;
      _this.state = {
        views: _views,
        activeView: _activeView
      };
      return _this;
    }

    (0, _createClass2["default"])(SimpleViewSlider, [{
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (prevProps.children !== this.props.children) {
          var child = React.Children.only(this.props.children);
          var activeView = parseInt(child.key);
          var views = (0, _toConsumableArray2["default"])(this.state.views);
          views[activeView] = child;
          this.setState({
            views: views,
            activeView: activeView
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this$props = this.props,
            children = _this$props.children,
            spacing = _this$props.spacing,
            rtl = _this$props.rtl,
            keepViewsMounted = _this$props.keepViewsMounted,
            keepPrecedingViewsMounted = _this$props.keepPrecedingViewsMounted,
            props = (0, _objectWithoutProperties2["default"])(_this$props, ["children", "spacing", "rtl", "keepViewsMounted", "keepPrecedingViewsMounted"]);
        var _this$state2 = this.state,
            activeView = _this$state2.activeView,
            views = _this$state2.views;
        return React.createElement(ViewSlider, (0, _extends2["default"])({}, props, {
          keepViewsMounted: keepViewsMounted || keepPrecedingViewsMounted,
          spacing: spacing,
          rtl: rtl,
          renderView: this.renderView,
          numViews: views.length,
          activeView: activeView,
          onSlideTransitionEnd: this.handleSlideTransitionEnd
        }));
      }
    }]);
    return SimpleViewSlider;
  }(React.Component), _temp;
}

var _default = createSimpleViewSlider(_index["default"]);

exports["default"] = _default;