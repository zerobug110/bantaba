"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSimpleViewSlider = createSimpleViewSlider;
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _inlineStylePrefixer = _interopRequireDefault(require("inline-style-prefixer"));

var _index = _interopRequireDefault(require("./index"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function defaultRenderView({
  index
}) {
  return this.state.views[index];
}

function createSimpleViewSlider(ViewSlider, renderView = defaultRenderView) {
  var _temp;

  return _temp = class SimpleViewSlider extends React.Component {
    constructor(props) {
      super(props);

      _defineProperty(this, "renderView", renderView.bind(this));

      _defineProperty(this, "handleSlideTransitionEnd", () => {
        if (!this.props.keepViewsMounted) {
          const {
            views,
            activeView
          } = this.state;

          if (activeView < views.length - 1) {
            this.setState({
              views: views.slice(0, activeView + 1)
            }, () => {
              const {
                onSlideTransitionEnd
              } = this.props;
              if (onSlideTransitionEnd) onSlideTransitionEnd();
            });
          }
        }
      });

      const child = React.Children.only(props.children);

      const _activeView = parseInt(child.key);

      const _views = [];
      _views[_activeView] = child;
      this.state = {
        views: _views,
        activeView: _activeView
      };
    }

    componentDidUpdate(prevProps) {
      if (prevProps.children !== this.props.children) {
        const child = React.Children.only(this.props.children);
        const activeView = parseInt(child.key);
        const views = [...this.state.views];
        views[activeView] = child;
        this.setState({
          views,
          activeView
        });
      }
    }

    render() {
      const _this$props = this.props,
            {
        children,
        // eslint-disable-line no-unused-vars
        // Flow's React.ComponentType + defaultProps is foobar...
        spacing,
        rtl,
        keepViewsMounted,
        keepPrecedingViewsMounted
      } = _this$props,
            props = _objectWithoutProperties(_this$props, ["children", "spacing", "rtl", "keepViewsMounted", "keepPrecedingViewsMounted"]);

      const {
        activeView,
        views
      } = this.state;
      return React.createElement(ViewSlider, _extends({}, props, {
        keepViewsMounted: keepViewsMounted || keepPrecedingViewsMounted,
        spacing: spacing,
        rtl: rtl,
        renderView: this.renderView,
        numViews: views.length,
        activeView: activeView,
        onSlideTransitionEnd: this.handleSlideTransitionEnd
      }));
    }

  }, _temp;
}

var _default = createSimpleViewSlider(_index.default);

exports.default = _default;