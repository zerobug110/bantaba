{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getBrowserInformation;\nvar _bowser = require('bowser');\nvar _bowser2 = _interopRequireDefault(_bowser);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar prefixByBrowser = {\n  chrome: 'Webkit',\n  safari: 'Webkit',\n  ios: 'Webkit',\n  android: 'Webkit',\n  phantom: 'Webkit',\n  opera: 'Webkit',\n  webos: 'Webkit',\n  blackberry: 'Webkit',\n  bada: 'Webkit',\n  tizen: 'Webkit',\n  chromium: 'Webkit',\n  vivaldi: 'Webkit',\n  firefox: 'Moz',\n  seamoney: 'Moz',\n  sailfish: 'Moz',\n  msie: 'ms',\n  msedge: 'ms'\n};\nvar browserByCanIuseAlias = {\n  chrome: 'chrome',\n  chromium: 'chrome',\n  safari: 'safari',\n  firfox: 'firefox',\n  msedge: 'edge',\n  opera: 'opera',\n  vivaldi: 'opera',\n  msie: 'ie'\n};\nfunction getBrowserName(browserInfo) {\n  if (browserInfo.firefox) {\n    return 'firefox';\n  }\n  if (browserInfo.mobile || browserInfo.tablet) {\n    if (browserInfo.ios) {\n      return 'ios_saf';\n    } else if (browserInfo.android) {\n      return 'android';\n    } else if (browserInfo.opera) {\n      return 'op_mini';\n    }\n  }\n  for (var browser in browserByCanIuseAlias) {\n    if (browserInfo.hasOwnProperty(browser)) {\n      return browserByCanIuseAlias[browser];\n    }\n  }\n}\n\n/**\n * Uses bowser to get default browser browserInformation such as version and name\n * Evaluates bowser browserInfo and adds vendorPrefix browserInformation\n * @param {string} userAgent - userAgent that gets evaluated\n */\nfunction getBrowserInformation(userAgent) {\n  var browserInfo = _bowser2.default._detect(userAgent);\n  if (browserInfo.yandexbrowser) {\n    browserInfo = _bowser2.default._detect(userAgent.replace(/YaBrowser\\/[0-9.]*/, ''));\n  }\n  for (var browser in prefixByBrowser) {\n    if (browserInfo.hasOwnProperty(browser)) {\n      var prefix = prefixByBrowser[browser];\n      browserInfo.jsPrefix = prefix;\n      browserInfo.cssPrefix = '-' + prefix.toLowerCase() + '-';\n      break;\n    }\n  }\n  browserInfo.browserName = getBrowserName(browserInfo);\n\n  // For cordova IOS 8 the version is missing, set truncated osversion to prevent NaN\n  if (browserInfo.version) {\n    browserInfo.browserVersion = parseFloat(browserInfo.version);\n  } else {\n    browserInfo.browserVersion = parseInt(parseFloat(browserInfo.osversion), 10);\n  }\n  browserInfo.osVersion = parseFloat(browserInfo.osversion);\n\n  // iOS forces all browsers to use Safari under the hood\n  // as the Safari version seems to match the iOS version\n  // we just explicitely use the osversion instead\n  // https://github.com/rofrischmann/inline-style-prefixer/issues/72\n  if (browserInfo.browserName === 'ios_saf' && browserInfo.browserVersion > browserInfo.osVersion) {\n    browserInfo.browserVersion = browserInfo.osVersion;\n  }\n\n  // seperate native android chrome\n  // https://github.com/rofrischmann/inline-style-prefixer/issues/45\n  if (browserInfo.browserName === 'android' && browserInfo.chrome && browserInfo.browserVersion > 37) {\n    browserInfo.browserName = 'and_chr';\n  }\n\n  // For android < 4.4 we want to check the osversion\n  // not the chrome version, see issue #26\n  // https://github.com/rofrischmann/inline-style-prefixer/issues/26\n  if (browserInfo.browserName === 'android' && browserInfo.osVersion < 5) {\n    browserInfo.browserVersion = browserInfo.osVersion;\n  }\n\n  // Samsung browser are basically build on Chrome > 44\n  // https://github.com/rofrischmann/inline-style-prefixer/issues/102\n  if (browserInfo.browserName === 'android' && browserInfo.samsungBrowser) {\n    browserInfo.browserName = 'and_chr';\n    browserInfo.browserVersion = 44;\n  }\n  return browserInfo;\n}\nmodule.exports = exports['default'];","map":{"version":3,"names":["Object","defineProperty","exports","value","default","getBrowserInformation","_bowser","require","_bowser2","_interopRequireDefault","obj","__esModule","prefixByBrowser","chrome","safari","ios","android","phantom","opera","webos","blackberry","bada","tizen","chromium","vivaldi","firefox","seamoney","sailfish","msie","msedge","browserByCanIuseAlias","firfox","getBrowserName","browserInfo","mobile","tablet","browser","hasOwnProperty","userAgent","_detect","yandexbrowser","replace","prefix","jsPrefix","cssPrefix","toLowerCase","browserName","version","browserVersion","parseFloat","parseInt","osversion","osVersion","samsungBrowser","module"],"sources":["/home/zerobug/www/bantaba/bantaba/frontend/node_modules/inline-style-prefixer/utils/getBrowserInformation.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getBrowserInformation;\n\nvar _bowser = require('bowser');\n\nvar _bowser2 = _interopRequireDefault(_bowser);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar prefixByBrowser = {\n  chrome: 'Webkit',\n  safari: 'Webkit',\n  ios: 'Webkit',\n  android: 'Webkit',\n  phantom: 'Webkit',\n  opera: 'Webkit',\n  webos: 'Webkit',\n  blackberry: 'Webkit',\n  bada: 'Webkit',\n  tizen: 'Webkit',\n  chromium: 'Webkit',\n  vivaldi: 'Webkit',\n  firefox: 'Moz',\n  seamoney: 'Moz',\n  sailfish: 'Moz',\n  msie: 'ms',\n  msedge: 'ms'\n};\n\n\nvar browserByCanIuseAlias = {\n  chrome: 'chrome',\n  chromium: 'chrome',\n  safari: 'safari',\n  firfox: 'firefox',\n  msedge: 'edge',\n  opera: 'opera',\n  vivaldi: 'opera',\n  msie: 'ie'\n};\n\nfunction getBrowserName(browserInfo) {\n  if (browserInfo.firefox) {\n    return 'firefox';\n  }\n\n  if (browserInfo.mobile || browserInfo.tablet) {\n    if (browserInfo.ios) {\n      return 'ios_saf';\n    } else if (browserInfo.android) {\n      return 'android';\n    } else if (browserInfo.opera) {\n      return 'op_mini';\n    }\n  }\n\n  for (var browser in browserByCanIuseAlias) {\n    if (browserInfo.hasOwnProperty(browser)) {\n      return browserByCanIuseAlias[browser];\n    }\n  }\n}\n\n/**\n * Uses bowser to get default browser browserInformation such as version and name\n * Evaluates bowser browserInfo and adds vendorPrefix browserInformation\n * @param {string} userAgent - userAgent that gets evaluated\n */\nfunction getBrowserInformation(userAgent) {\n  var browserInfo = _bowser2.default._detect(userAgent);\n\n  if (browserInfo.yandexbrowser) {\n    browserInfo = _bowser2.default._detect(userAgent.replace(/YaBrowser\\/[0-9.]*/, ''));\n  }\n\n  for (var browser in prefixByBrowser) {\n    if (browserInfo.hasOwnProperty(browser)) {\n      var prefix = prefixByBrowser[browser];\n\n      browserInfo.jsPrefix = prefix;\n      browserInfo.cssPrefix = '-' + prefix.toLowerCase() + '-';\n      break;\n    }\n  }\n\n  browserInfo.browserName = getBrowserName(browserInfo);\n\n  // For cordova IOS 8 the version is missing, set truncated osversion to prevent NaN\n  if (browserInfo.version) {\n    browserInfo.browserVersion = parseFloat(browserInfo.version);\n  } else {\n    browserInfo.browserVersion = parseInt(parseFloat(browserInfo.osversion), 10);\n  }\n\n  browserInfo.osVersion = parseFloat(browserInfo.osversion);\n\n  // iOS forces all browsers to use Safari under the hood\n  // as the Safari version seems to match the iOS version\n  // we just explicitely use the osversion instead\n  // https://github.com/rofrischmann/inline-style-prefixer/issues/72\n  if (browserInfo.browserName === 'ios_saf' && browserInfo.browserVersion > browserInfo.osVersion) {\n    browserInfo.browserVersion = browserInfo.osVersion;\n  }\n\n  // seperate native android chrome\n  // https://github.com/rofrischmann/inline-style-prefixer/issues/45\n  if (browserInfo.browserName === 'android' && browserInfo.chrome && browserInfo.browserVersion > 37) {\n    browserInfo.browserName = 'and_chr';\n  }\n\n  // For android < 4.4 we want to check the osversion\n  // not the chrome version, see issue #26\n  // https://github.com/rofrischmann/inline-style-prefixer/issues/26\n  if (browserInfo.browserName === 'android' && browserInfo.osVersion < 5) {\n    browserInfo.browserVersion = browserInfo.osVersion;\n  }\n\n  // Samsung browser are basically build on Chrome > 44\n  // https://github.com/rofrischmann/inline-style-prefixer/issues/102\n  if (browserInfo.browserName === 'android' && browserInfo.samsungBrowser) {\n    browserInfo.browserName = 'and_chr';\n    browserInfo.browserVersion = 44;\n  }\n\n  return browserInfo;\n}\nmodule.exports = exports['default'];"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}